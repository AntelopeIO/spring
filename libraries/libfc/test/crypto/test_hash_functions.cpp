#include <boost/test/unit_test.hpp>

#include <fc/crypto/hex.hpp>
#include <fc/crypto/sha256.hpp>
#include <fc/crypto/sha3.hpp>
#include <fc/utility.hpp>

using namespace fc;

BOOST_AUTO_TEST_SUITE(hash_functions)
BOOST_AUTO_TEST_CASE(sha3) try {

   using test_sha3 = std::tuple<std::string, std::string>;
   const std::vector<test_sha3> tests {
      //test
      {
         "",
         "a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a",
      },

      //test
      {
         "abc",
         "3a985da74fe225b2045c172d6bd390bd855f086e3e9d525b46bfe24511431532",
      },

      //test
      {
         "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
         "41c0dba2a9d6240849100376a8235e2c82e1b9998a999e21db32dd97496d3376",
      }
   };

   for(const auto& test : tests) {
      BOOST_CHECK_EQUAL(fc::sha3::hash(std::get<0>(test), true).str(), std::get<1>(test));
   }

} FC_LOG_AND_RETHROW();


BOOST_AUTO_TEST_CASE(keccak256) try {

   using test_keccak256 = std::tuple<std::string, std::string>;
   const std::vector<test_keccak256> tests {
      //test
      {
         "",
         "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
      },

      //test
      {
         "abc",
         "4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45",
      },

      //test
      {
         "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
         "45d3b367a6904e6e8d502ee04999a7c27647f91fa845d456525fd352ae3d7371",
      }
   };

   for(const auto& test : tests) {
      BOOST_CHECK_EQUAL(fc::sha3::hash(std::get<0>(test), false).str(), std::get<1>(test));
   }

} FC_LOG_AND_RETHROW();

BOOST_AUTO_TEST_SUITE_END()

//selected test vectors from NIST CAVP. In particular looking at edges of padding (55, 56, 63, 64 length)
static_assert(fc::sha256::hash(std::string("")) == fc::sha256("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"));
static_assert(fc::sha256::hash(std::string("\xd3")) == fc::sha256("28969cdfa74a12c82f3bad960b0b000aca2ac329deea5c2328ebc6f2ba9802c1"));
static_assert(fc::sha256::hash(std::string("\x11\xaf")) == fc::sha256("5ca7133fa735326081558ac312c620eeca9970d1e70a4b95533d956f072d1f98"));
//440 bits
static_assert(fc::sha256::hash(std::string("\x3e\xbf\xb0\x6d\xb8\xc3\x8d\x5b\xa0\x37\xf1\x36\x3e\x11\x85\x50\xaa\xd9\x46\x06\xe2\x68\x35\xa0\x1a\xf0\x50\x78\x53\x3c\xc2\x5f\x2f\x39\x57\x3c\x04\xb6\x32\xf6\x2f\x68\xc2\x94\xab\x31\xf2\xa3\xe2\xa1\xa0\xd8\xc2\xbe\x51")) ==
                                fc::sha256("6595a2ef537a69ba8583dfbf7f5bec0ab1f93ce4c8ee1916eff44a93af5749c4"));
//448 bits (embedded \x00 in this vector requires some additional indirection
static constexpr char bits448[] = "\x2d\x52\x44\x7d\x12\x44\xd2\xeb\xc2\x86\x50\xe7\xb0\x56\x54\xba\xd3\x5b\x3a\x68\xee\xdc\x7f\x85\x15\x30\x6b\x49\x6d\x75\xf3\xe7\x33\x85\xdd\x1b\x00\x26\x25\x02\x4b\x81\xa0\x2f\x2f\xd6\xdf\xfb\x6e\x6d\x56\x1c\xb7\xd0\xbd\x7a";
static_assert(fc::sha256::hash(std::string(bits448, sizeof(bits448)-1)) ==
                                fc::sha256("cfb88d6faf2de3a69d36195acec2e255e2af2b7d933997f348e09f6ce5758360"));
//504 bits
static_assert(fc::sha256::hash(std::string("\xe2\xf7\x6e\x97\x60\x6a\x87\x2e\x31\x74\x39\xf1\xa0\x3f\xcd\x92\xe6\x32\xe5\xbd\x4e\x7c\xbc\x4e\x97\xf1\xaf\xc1\x9a\x16\xfd\xe9\x2d\x77\xcb\xe5\x46\x41\x6b\x51\x64\x0c\xdd\xb9\x2a\xf9\x96\x53\x4d\xfd\x81\xed\xb1\x7c\x44\x24\xcf\x1a\xc4\xd7\x5a\xce\xeb")) ==
                                fc::sha256("18041bd4665083001fba8c5411d2d748e8abbfdcdfd9218cb02b68a78e7d4c23"));
//5264 bits
static constexpr char bits5264[] = "\x7d\xd5\x46\x39\x7a\x9a\x01\x29\x86\x1f\xb6\x81\x5d\x41\x9a\x30\x7f\x90\xd2\x59\xd5\x5f\x35\x03\x96\x17\x54\x12\x6c\xd1\xb7\x76\xd3\x23\x6a\xa2\xc2\x39\xb9\x3f\x8e\x28\x37\x22\x0b\x80\x05\x7c\xf4\x20\x50\x51\x8d\x4f\x1c\x2c\x86\x08\x40\x10\x23\x94\xb2\xb1\x9a\x5f\x05\xe4\xbd\x04\x30\x55\xd8\xaa\x91\x78\xdd\x93\x32\xc2\xbe\xf2\x4a\x18\x1b\xfd\x07\x88\x1d\x44\x8a\x37\xa2\x41\x34\x9a\x9a\x30\x20\xe9\xb0\x21\xf0\xd1\x2e\x4b\xcd\x6a\x1a\xa3\xa9\x68\xa5\xad\xc7\x95\xc7\x92\x7e\x7f\x23\x74\x3a\x6d\x30\xfe\xc3\x98\x9a\x3f\xc2\x98\xe6\xb8\x81\x1d\x56\xb3\xf2\xdf\x0c\xd7\xf3\xd8\x71\xfa\xd0\xb0\xd8\x36\x09\x79\x5f\x3f\x56\x9c\x16\xf3\xe9\x13\x64\x33\xf3\xd9\xa6\xf2\x69\x9f\x18\x8b\x08\xc1\xf9\x58\x97\x78\xea\x80\x6c\x51\x98\x10\x31\xde\x9a\x4e\xe8\xab\x9d\x4a\x2d\x73\xbe\xb5\xbb\x94\x37\xf6\x32\xc1\x3e\x7b\x18\xf7\x2a\x4d\x1d\xb2\xd8\xe8\xa3\x60\x4d\x49\x7d\x16\x9c\x48\xf7\x82\x0a\x28\x17\x21\x71\x6d\x23\xb1\xe2\xed\x63\xea\x8e\x2a\x28\x69\xe7\xdf\x0e\xed\x02\xd9\x7d\xc5\x40\x08\x76\x89\x2d\xd6\x8c\x09\xa8\xb7\x30\x83\x45\x02\x32\x19\xef\xff\x85\x81\xd2\x41\x43\xff\x78\x36\xf0\x90\x31\xfc\x03\x68\xb9\x76\xa2\x9f\x15\xa0\xae\x28\xbe\x1f\xff\x02\x01\x1d\xf1\xb2\xa6\x53\x1f\xf0\xd0\x67\x6e\xa1\x24\x79\x4e\x05\x2d\xf9\x3c\x32\xff\xbb\x8b\xc1\x1b\x4d\x65\xc7\x93\x88\x0d\x07\x6f\x65\x66\x65\x4e\x12\xb9\x9e\x51\x45\xb3\x37\x34\xd1\xad\xb3\xbe\x77\x31\x09\x5c\xfe\xb9\x55\x09\x85\xb9\xce\x70\x19\xe0\xf8\x55\x83\x9b\x1b\x31\x63\xdc\xf3\x1c\x83\x19\xa9\xf0\x65\x97\x02\xac\x1e\xe8\xd7\x16\x67\xb3\xc5\xa5\xf2\xb3\x25\x9d\xfa\x02\x3e\x7c\x1e\x98\xba\x95\x6f\x0e\x57\xfb\xc8\xa8\xdf\xa0\x5e\x93\x5a\xbe\x97\x6b\x82\x76\x20\x01\x77\xb8\x3a\x5a\xb4\x62\x54\xfb\x42\xac\xdf\x63\x2b\xc3\x5e\xda\x32\xb4\xbc\x69\xc1\x8c\xe3\x2a\x23\xbd\x8a\xc2\xf3\xc4\x4e\x2b\xd5\x09\x05\xb7\x64\x07\x4f\x51\x6b\xac\x6d\x06\x57\x03\x57\xc5\xec\x10\x08\x63\x38\xfc\x1d\xe2\xc5\x72\x9e\xf3\x13\x48\x1c\xb9\x45\x62\xfc\xd0\x1b\xd3\x12\x8e\x20\x46\x72\x89\x25\x9d\x82\x59\xed\xd7\x54\x9f\x2a\x37\x33\x46\xa8\xa2\x7c\x08\xc9\x4a\xb0\x34\x31\x89\xc6\xaf\xc2\x0f\xc6\x39\xcb\x40\x93\xf2\x7c\xd8\x08\x1d\x9e\xd1\x47\x23\x81\x86\x4e\xdb\x35\x18\xcc\x08\xfc\x11\x32\x24\x00\x47\x0c\x5c\x42\x04\x92\xdb\xd3\x63\x7a\x4b\x46\xfd\x11\x99\x65\xc5\x8a\xf9\x23\x31\x96\x2b\xd2\x9b\x35\xfc\x96\xe6\xcb\x0f\x1a\x64\x76\xdd\x81\xf7\x9f\xfb\xa0\x77\xcf\x9c\x6a\x54\xc4\x56\xab\x7d\xc5\x29\xfa\x80\x32\xbd\xe8\xf2\x5f\xeb\x7e\x11\xa2\x7f\xe7\xa8\xab\x3c\x69\x33\x14\x21\x9a\x44\x39\xeb\xd0\x25\x4a\xdb\xd9\xbf\x9f\xb9\xec\xba\x4b\x19\xe0\xe6\xf3\xdd\x9c\xda\xe1\xfb\xcf\xdb\x54\x81\xe1\xff\x1a\xd6\x29\x91\x61\x42\x60\xb8\xcb\xb0\x55\x54\xc0\xb3\xe3\x29\x08\xc8\x20\x3f\x99";
static_assert(fc::sha256::hash(std::string(bits5264, sizeof(bits5264)-1)) ==
                                fc::sha256("0599f88c429a3d4fcbb0206fa57e344121afdf8e56f78e3f5e61ba3bcf134ec6"));